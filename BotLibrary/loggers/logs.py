# BotLibrary/loggers/logs.py
# –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–æ–≤ –∏ –∏—Ö —à–∞–±–ª–æ–Ω –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞

import sys
from loguru import logger
from ProjectsFiles import BotLogs, ProjectPath

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏–∑ –º–æ–¥—É–ª—è
__all__ = ("setup_logger",)

# –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ã—á–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞ + –ª–æ–≥–≥–µ—Ä –≤ —Ñ–∞–π–ª
async def setup_logger(logging: bool = BotLogs.permission,
                       to_file: bool = BotLogs.permission_to_file) -> None:
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞, –≤—ã–≤–æ–¥—è—â–∏—Ö –ª–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å –∏ —Ñ–∞–π–ª—ã.
    –õ–æ–≥–≥–µ—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É—é—Ç—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –∫–æ–Ω—Ñ–∏–≥–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞.

    –ï—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –ª–æ–≥–∏ –¥–ª—è —É—Ä–æ–≤–Ω–µ–π DEBUG, INFO, WARNING, ERROR.
    –ò –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Ç–∞–∫–∏–µ, –∫–∞–∫ START, NEW_USER, LEAVE_USER

    :param logging: –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å (config)
    :param to_file: –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª (config)

    :return: –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–≥–µ—Ä–æ–≤ –ø–æ–¥ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —É—Ä–æ–≤–Ω–∏
    """
    logger.remove()  # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ª–æ–≥–≥–µ—Ä—ã


    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ, —Ç–æ –æ–Ω —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–µ —É—Ä–æ–≤–Ω–∏
    if logging and BotLogs.permission_to_file:
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å START
        logger.level("START", no=25, color="white", icon="üî∏")
    if logging and BotLogs.permission_new_user:
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å NEW_USER
        logger.level("NEW_USER", no=4, color="white", icon="üëã")
    if logging and BotLogs.permission_leave_user:
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å LEAVE_USER
        logger.level("LEAVE_USER", no=3, color="white", icon="ü´∞")


    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è
    if logging:
        logger.add(sys.stderr,
                   colorize=True,
                   format=BotLogs.start_text,
                   level="START",
                   filter=lambda record: record["level"].name == "START"
        )
        logger.add(sys.stderr,
                   colorize=True,
                   format=BotLogs.debug_text,
                   level="DEBUG",
                   filter=lambda record: record["level"].name == "DEBUG")
        logger.add(sys.stderr,
                   colorize=True,
                   format=BotLogs.info_text,
                   level="INFO",
                   filter=lambda record: record["level"].name == "INFO")
        logger.add(sys.stderr,
                   colorize=True,
                   format=BotLogs.warning_text,
                   level="WARNING",
                   filter=lambda record: record["level"].name == "WARNING")
        logger.add(sys.stderr,
                   colorize=True,
                   format=BotLogs.error_text,
                   level="ERROR",
                   filter=lambda record: record["level"].name == "ERROR")


    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª
    if to_file:
        logger.add(ProjectPath.start_log_file,
                   rotation=BotLogs.max_size,
                   format=BotLogs.start_text,
                   backtrace=True,
                   diagnose=True,
                   level="START",
                   filter=lambda record: record["level"].name == "START")
        logger.add(ProjectPath.debug_log_file,
                   rotation=BotLogs.max_size,
                   format=BotLogs.debug_text,
                   backtrace=True,
                   diagnose=True,
                   level="DEBUG",
                   filter=lambda record: record["level"].name == "DEBUG")
        logger.add(ProjectPath.info_log_file,
                    rotation=BotLogs.max_size,
                    format=BotLogs.info_text,
                    backtrace=True,
                    diagnose=True,
                    level="INFO",
                    filter=lambda record: record["level"].name == "INFO")
        logger.add(ProjectPath.warning_log_file,
                    rotation=BotLogs.max_size,
                    format=BotLogs.warning_text,
                    backtrace=True,
                    diagnose=True,
                    level="WARNING",
                    filter=lambda record: record["level"].name == "WARNING")
        logger.add(ProjectPath.error_log_file,
                    rotation=BotLogs.max_size,
                    format=BotLogs.error_text,
                    backtrace=True,
                    diagnose=True,
                    level="ERROR",
                    filter=lambda record: record["level"].name == "ERROR")
